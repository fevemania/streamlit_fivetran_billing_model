import streamlit as st
import plost
import pandas as pd
import numpy as np
from datetime import datetime
from functions.setup_page import page_creation

## Apply standard page settings.
st.set_page_config(
    layout="wide",
    initial_sidebar_state="expanded",
)

st.title('Subscriptions Report')

## Define data and filters. The resulting data variable includes the data with all filters applied.
data = page_creation()

# Everything below this point will be generated by the assigned analyst. 
# The framework has been set, but no visualization or data processing has been applied.
# Please perform any data processing in this file and not within the filter files. We can discuss upon completion if it makes sense to add any code to the filters file.

# Convert payment_at to datetime if not already

data.loc[:, 'payment_at'] = pd.to_datetime(data['payment_at'])
data['payment_month'] = data['payment_at'].dt.to_period('M')
data['subscription_started_month'] = data['subscription_period_started_at'].dt.to_period('M')

# Filter the Dataframe to include only 'subscription' and 'recurring' billing types
subscription_data = data[
    (data['billing_type'].isin(['subscription', 'recurring'])) & 
    (data['transaction_type'] == 'sale')
]

# Filter the Dataframe to include only 'one-time' and 'invoiceitem' billing types
onetime_data = data[
    (data['billing_type'].isin(['one-time', 'invoiceitem'])) & 
    (data['transaction_type'] == 'sale')
]

# Group by 'payment_month' to calculate MRR and single order
mrr_data = subscription_data.groupby(subscription_data['payment_month'])['total_amount'].sum().sort_index()
single_order_data = onetime_data.groupby(onetime_data['payment_month'])['total_amount'].sum().sort_index()

## KPI Metrics which need to be updated.
with st.container():
    col1, col2, col3, col4, col5 = st.columns(5)

    # Total Revenue From Subscriptions
    with col1:
        current_total_revenue = subscription_data['total_amount'].sum()
        last_year_total_revenue = subscription_data[subscription_data['payment_month'].dt.year == (subscription_data['payment_month'].dt.year.max() - 1)]['total_amount'].sum()
        yoy_total_revenue = current_total_revenue - last_year_total_revenue
        yoy_total_revenue_str = f'{yoy_total_revenue:,.2f} YoY' if not pd.isna(yoy_total_revenue) else "no data"
        st.metric(
            label="**Total Revenue From Subscriptions**", 
            value=f'{current_total_revenue:,.2f}',
            delta=yoy_total_revenue_str  # Use conditional string
        )

    # Active Subscriptions
    with col2:
        current_active_subscriptions = subscription_data[subscription_data['subscription_status'] == 'active']['subscription_status'].count()
        last_year_active_subscriptions = subscription_data[
            (subscription_data['subscription_status'] == 'active') & 
            (subscription_data['payment_month'].dt.year == (subscription_data['payment_month'].dt.year.max() - 1))
        ]['subscription_status'].count()
        yoy_active_subscriptions = current_active_subscriptions - last_year_active_subscriptions
        yoy_active_subscriptions_str = f'{yoy_active_subscriptions:,.0f} YoY' if not pd.isna(yoy_active_subscriptions) else "no data"
        st.metric(
            label="**Active Subscriptions**", 
            value=current_active_subscriptions,
            delta=yoy_active_subscriptions_str  # Use conditional string
        )

    # New Subscriptions
    with col3:
        current_new_subscriptions = subscription_data['subscription_status'].count()
        last_year_new_subscriptions = subscription_data[
            subscription_data['payment_month'].dt.year == (subscription_data['payment_month'].dt.year.max() - 1)
        ]['subscription_status'].count()
        yoy_new_subscriptions = current_new_subscriptions - last_year_new_subscriptions
        yoy_new_subscriptions_str = f'{yoy_new_subscriptions:,.0f} YoY' if not pd.isna(yoy_new_subscriptions) else "no data"
        st.metric(
            label="**New Subscriptions**", 
            value=current_new_subscriptions,
            delta=yoy_new_subscriptions_str  # Use conditional string
        )

    # Average Subscription Length (weeks)
    with col4:
        subscription_data['subscription_length_weeks'] = (subscription_data['subscription_period_ended_at'] - subscription_data['subscription_period_started_at']).dt.days / 7
        current_avg_subscription_length_weeks = subscription_data['subscription_length_weeks'].mean()
        last_year_avg_subscription_length_weeks = subscription_data[
            subscription_data['payment_month'].dt.year == (subscription_data['payment_month'].dt.year.max() - 1)
        ]
        if not last_year_avg_subscription_length_weeks.empty:
            last_year_avg_subscription_length_weeks = (last_year_avg_subscription_length_weeks['subscription_period_ended_at'] - last_year_avg_subscription_length_weeks['subscription_period_started_at']).dt.days / 7
            last_year_avg_subscription_length_weeks = last_year_avg_subscription_length_weeks.mean()
        else:
            last_year_avg_subscription_length_weeks = np.nan
        yoy_avg_subscription_length_weeks = current_avg_subscription_length_weeks - last_year_avg_subscription_length_weeks
        yoy_avg_subscription_length_weeks_str = f"{yoy_avg_subscription_length_weeks:.1f} YoY" if not pd.isna(yoy_avg_subscription_length_weeks) else "no data"
        st.metric(
            label="**Average Subscription Length (weeks)**", 
            value=f"{current_avg_subscription_length_weeks:.1f}",
            delta=yoy_avg_subscription_length_weeks_str  # Use conditional string
        )

    # Most Recent Month MRR
    with col5:
        most_recent_mrr = mrr_data.iloc[-1] if not mrr_data.empty else 0
        last_year_mrr = mrr_data.shift(12).iloc[-1] if not mrr_data.shift(12).empty else np.nan
        yoy_mrr = most_recent_mrr - last_year_mrr
        yoy_mrr_str = f"{yoy_mrr:,.2f} YoY" if not pd.isna(yoy_mrr) else "no data"
        st.metric(
            label="**Most Recent Month MRR**", 
            value=f"{most_recent_mrr:,.2f}",
            delta=yoy_mrr_str  # Use conditional string
        )

# Time series charts need to be built out
with st.container():
    row1_col1, row1_col2 = st.columns(2)
    row2_col1, row2_col2 = st.columns(2)

    with row1_col1:
        st.markdown("**Number of New Subscriptions**")

        # Number of New Subscriptions
        new_subscriptions_data = subscription_data.groupby('subscription_started_month').size()

        # Convert PeriodIndex to datetime for better x-axis formatting
        new_subscriptions_data.index = new_subscriptions_data.index.to_timestamp()

        st.line_chart(new_subscriptions_data)

    with row1_col2:
        st.markdown("**Number of New Subscriptions by Plan**")
        
        # Group by 'subscription_month' and 'subscription_plan'
        subscription_by_plan = subscription_data.groupby(['subscription_started_month', 'subscription_plan']).size().unstack(fill_value=0)
        
        # Convert PeriodIndex to datetime for better x-axis formatting
        subscription_by_plan.index = subscription_by_plan.index.to_timestamp()

        # Create DataFrame for plotting
        st.line_chart(subscription_by_plan)

    with row2_col1:
        st.markdown("**Subscription Revenue by Product Type**")
        
        # Group by 'subscription_month' and 'product_type', then sum total_amount
        revenue_by_product_type = subscription_data.groupby(['payment_month', 'product_type'])['total_amount'].sum().unstack(fill_value=0)
        
        # Convert PeriodIndex to datetime for better x-axis formatting
        revenue_by_product_type.index = revenue_by_product_type.index.to_timestamp()

        st.line_chart(revenue_by_product_type)

    with row2_col2:
        st.markdown("**Subscription Revenue vs. Single Order Revenue**")

        # Convert PeriodIndex to datetime for better x-axis formatting
        mrr_data.index = mrr_data.index.to_timestamp()
        single_order_data.index = single_order_data.index.to_timestamp()

        # Create DataFrame for plotting
        revenue_data = pd.DataFrame({
            'Subscription Revenue': mrr_data,
            'Single Order Revenue': single_order_data
        })

        st.line_chart(revenue_data)

st.divider()

st.markdown("**Raw Data**")
st.dataframe(data) ## This is here just as an example. This can be deleted during development and before release.

st.divider()